# Default values for xl-deploy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# No. of XL-Deploy master and worker pods to run.
XldMasterCount: 1
XldWorkerCount: 1

## XL-Deploy image version
## Ref: https://hub.docker.com/r/xebialabs/xl-deploy/tags
ServerImageRepository: "xebialabs/xl-deploy"
WorkerImageRepository: "xebialabs/deploy-task-engine"
ImageTag: "22.1"

## xebialabs/tiny-tools image version
## Ref: https://hub.docker.com/r/xebialabs/tiny-tools/tags
TinyToolsImageRepository: "xebialabs/tiny-tools"
TinyToolsImageTag: "22.2.0"

## Specify a imagePullPolicy
## Defaults to 'Always' if image tag is 'latest',set to 'IfNotPresent'
ImagePullPolicy: "Always"

deploy:
  master:
    image:
      tag: 22.2
  worker:
    image:
      tag: 22.2
  configurationManagement:
    centralConfiguration:
      configuration:
        enabled: true
        resetFiles: ## Resets part of the configuration files
          - xlc-wrapper.conf.common
          - jmx-exporter.yaml
        resetCcFiles:
          - deploy-server.yaml
        script: |-
          cat example.txt && echo ""; # Add here commands to be executed before centralConfiguration server start
        scriptData: ## Add here files that will be used by the configurationScript
          example.txt: |-
            Nothing to manage at this point.
      environment:
        enabled: true
        variables: {}
      volumeMounts:
        enabled: true
        paths: {}
    master:
      configuration:
        enabled: true
        resetFiles: ## Resets part of the configuration files and license
          - deployit-license.lic
          - jmx-exporter.yaml
          - xld-wrapper.conf.common
        script: |-
          cat example.txt && echo ""; # Add here commands to be executed before master start
        scriptData: ## Add here files that will be used by the configurationScript
          example.txt: |-
            Nothing to manage at this point.
      environment:
        enabled: true
        variables: {}
      volumeMounts:
        enabled: true
        paths: {}
    worker:
      configuration:
        enabled: true
        resetFiles: ## Resets part of the configuration files and license
          - deployit-license.lic
          - jmx-exporter.yaml
          - xld-wrapper.conf.common
        script: |-
          cat example.txt && echo ""; # Add here commands to be executed before worker start
        scriptData: ## Add here files that will be used by the configurationScript
          example.txt: |-
            Nothing to manage at this point.
      environment:
        enabled: true
        variables: {}
      volumeMounts:
        enabled: true
        paths: {}

## Ref: https://docs.openshift.com/container-platform/4.5/networking/routes/route-configuration.html
route:
  Enabled: true
  annotations:
    haproxy.router.openshift.io/cookie_name: SESSION_XLD
    haproxy.router.openshift.io/disable_cookies: "false"
    haproxy.router.openshift.io/rewrite-target: /
  path: /
  hosts:
    - xld-operator.apps.operatorcluster.f660.p1.openshiftapps.com

## By default only Edge Termination is supported with Deploy.
## To configure SSL/TLS with Deploy uncomment the below tls section and provide the private key, certificate and optional caCertificate.
## The allowed values for insecureEdgeTerminationPolicy are: None or empty (for disabled), Allow or Redirect
## Ref: https://docs.openshift.com/container-platform/4.5/networking/routes/secured-routes.html
#  tls:
#    key: |-
#      -----BEGIN PRIVATE KEY-----
#      -----END PRIVATE KEY-----
#    certificate: |-
#      -----BEGIN CERTIFICATE-----
#      -----END CERTIFICATE-----
#    caCertificate: |-
#      -----BEGIN CERTIFICATE-----
#      -----END CERTIFICATE-----
#    insecureEdgeTerminationPolicy: Redirect

# https://docs.xebialabs.com/v.10.2/deploy/docker/docker-environment-variables/
AdminPassword:
  admin
  # Provide the admin password to be used

xldLicense:
  LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==LS0tIExpY2Vuc2UgLS0tDQpMaWNlbnNlIHZlcnNpb246IDMNClByb2R1Y3Q6IFhMIERlcGxveQ0KTGljZW5zZWQgdG86IFhlYmlhTGFicw0KQ29udGFjdDogWGViaWFMYWJzIEludGVybmFsIFVzZSBPbmx5IDxpbmZvQHhlYmlhbGFicy5jb20+DQpFeHBpcmVzIGFmdGVyOiAyMDM3LTAxLTAxDQpMaWNlbnNlZCBudW1iZXIgb2YgQ0lzOiB4bC5TYXRlbGxpdGU9MTAwMA0KTGljZW5zZWQgcGx1Z2luOiBqYm9zc2FzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3bXEtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IG9zYi1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogdG9tY2F0LXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3cHMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IHdpbmRvd3MtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGlpcy1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogYml6dGFsay1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogd2xzLXBsdWdpbg0KTGljZW5zZWQgcGx1Z2luOiB3YXMtcGx1Z2luDQpMaWNlbnNlZCBwbHVnaW46IGdsYXNzZmlzaC1wbHVnaW4NCkxpY2Vuc2VkIHBsdWdpbjogamJvc3NkbS1wbHVnaW4NClN1cHBvcnQgcG9saWN5OiA4eDUNCkVkaXRpb246IEVudGVycHJpc2UNCi0tLSBTaWduYXR1cmUgKFNIQTF3aXRoRFNBKSAtLS0NCjMwMmMwMjE0MzU4N2U4YTQwNGQ0MjMyYmQ0N2U2OTY1OTI3ODE3MzYyMWFkYjEzNTAyMTQ2NmNlNWExZGZkOTYxYmZhNDQ4OGY0ZTJmMDM2DQpiYTMzODkwZTY3ZWINCi0tLSBFbmQgb2YgU2lnbmF0dXJlIC0tLQ==
# Convert xl-deploy.lic files content to base64 ( cat xl-deploy.lic | base64 -w 0 ) and put the output here

RepositoryKeystore:
  zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAX6WCS4UrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECHH7+GZLi2JCAgMDDUB1cQB+AAUAAACQLIcSnw/m/x+XSU6AMgRl1YLsgwwAIWx+eXEWVAGgO7DhGX37TOFVES78+oY+WYoGQNJ7+JJCuQac4XddxCHvvgFfy76hlpfpZyKFSs84BI98vwM+aSkQsS9ycRdbcsX/coXgQDy3Jno3MqVDLkMc3TPoq7brwJCx6yamYtdPwu3eUoknxRHgLzUtXCAGPF8vdAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVOxSsxuY+EqwdjnSbh7sh5vYAb4GQ==
# https://docs.xebialabs.com/v.10.2/deploy/how-to/changing-passwords-in-xl-deploy/
# Convert repository-keystore.jceks files content to base64 ( cat repository-keystore.jceks | base64 -w 0 ) and put the output here

KeystorePassphrase:
  test123
# Passphrase for repository-keystore.jceks file

CentralConfigEncryptKey:
# spring cloud config encryption key

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 3
  #  memory: 3Gi
  # requests:
  #  cpu: 0.7
  #  memory: 1700Mi

## Ref: https://github.com/bitnami/charts/blob/master/bitnami/postgresql/README.md
## Install postgresql chart. If you have an existing database deployment, set 'install' to 'false'.
postgresql:
  install: true
  initdbScriptsSecret: "postgresql-init-sql-xld"
  image:
    pullSecrets: []
  persistence:
    enabled: true
    storageClass: "aws-efs"
    size: 8Gi
    existingClaim: ""
  postgresqlUsername: postgres
  postgresqlPassword: ""
  postgresqlMaxConnections: "300"
  service:
    type: ClusterIP
    port: 5432
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
  volumePermissions:
    securityContext:
      runAsUser: "auto"
  securityContext:
    enabled: false
  containerSecurityContext:
    enabled: false
  shmVolume:
    chmod:
      enabled: false

# https://docs.xebialabs.com/v.10.2/deploy/how-to/configure-the-xl-deploy-sql-repository/
UseExistingDB:
  Enabled: false
  # If you want to use an existing database, change 'postgresql.install' to 'false'.
  # Set 'UseExistingDB.Enabled' to 'true'.Uncomment the following lines and provide the values.
  # XL_DB_URL:
  # XL_DB_USERNAME:
  # XL_DB_PASSWORD:

## Install rabbitmq chart. If you have an existing message queue deployment, set 'install' to 'false'.
## ref: https://github.com/bitnami/charts/blob/master/bitnami/rabbitmq/README.md
rabbitmq:
  install: true
  replicaCount: 1
  image:
    pullSecrets: []
  auth:
    username: guest
    password: guest
    erlangCookie: DEPLOYRABBITMQCLUSTER
  extraPlugins: 'rabbitmq_jms_topic_exchange'
  extraSecrets:
    xld-load-definition:
      xld-load_definition.json: |
        {
        "users": [
          {
              "name": "{{ .Values.auth.username }}",
              "password": "{{ .Values.auth.password }}",
              "tags": "administrator"
          }
          ],
        "vhosts": [
          {
            "name": "/"
          }
          ],
          "permissions": [
          {
            "user": "{{ .Values.auth.username }}",
            "vhost": "/",
            "configure": ".*",
            "write": ".*",
            "read": ".*"
          }
          ],
        "global_parameters": [
          {
            "name": "cluster_name",
            "value": ""
          }
          ],
         "policies": [
            {
              "name": "ha-all",
              "apply-to": "all",
              "pattern": ".*",
              "vhost": "/",
              "definition": {
                "ha-mode": "all",
                "ha-sync-mode": "automatic",
                "ha-sync-batch-size": 1
              }
            }
          ]
        }
  loadDefinition:
    enabled: true
    existingSecret: xld-load-definition
  extraConfiguration: |
    load_definitions = /app/xld-load_definition.json
    raft.wal_max_size_bytes = 1048576
  persistence:
    enabled: true
    storageClass: "aws-efs"
    size: 8Gi
  service:
    type: ClusterIP
  volumePermissions:
    enabled: true

UseExistingMQ:
  Enabled: false
  # If you want to use a existing Message Queue, change the "rabbitmq.install to false"
  # Set 'UseExistingMQ.Enabled' to 'true'.Uncomment the following lines and provide the values.
  # XLD_TASK_QUEUE_USERNAME:
  # XLD_TASK_QUEUE_PASSWORD:
  # XLD_TASK_QUEUE_URL:
  # XLD_TASK_QUEUE_DRIVER_CLASS_NAME:

## Configure extra options for liveness and readiness probes
HealthProbes: true
HealthProbesLivenessTimeout: 60
HealthProbesReadinessTimeout: 60
HealthProbeFailureThreshold: 12
HealthPeriodScans: 10

nodeSelector: {}

tolerations: []

## Affinity and anti-affinity
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

## XL Deploy data Persistent Volume for 'XL Deploy export'
## If "Persistence.Enabled" set to "false", it will use hostPath.
Persistence:
  Enabled: true
  ## Choose storage class provided by your cloud provider, example "ssd" on GKE, AWS and OpenStack
  StorageClass: "aws-efs"
  Annotations: {}
  AccessMode: ReadWriteOnce
  XldMasterPvcSize: 10Gi
  XldWorkerPvcSize: 10Gi

# Set "satellite.Enabled" value to "true" to use the "XL Satellite" feature
satellite:
  Enabled: false

keycloak:
  install: false
  extraEnv: |
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_USER
      value: admin
    - name: KEYCLOAK_PASSWORD
      value: admin
    - name: JGROUPS_DISCOVERY_PROTOCOL
      value: dns.DNS_PING
    - name: JGROUPS_DISCOVERY_PROPERTIES
      value: 'dns_query={{ include "keycloak.serviceDnsName" . }}'
    - name: CACHE_OWNERS_COUNT
      value: "2"
    - name: CACHE_OWNERS_AUTH_SESSIONS_COUNT
      value: "2"
    - name: JAVA_OPTS
      value: >-
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=50.0
        -Djava.net.preferIPv4Stack=true
        -Djboss.modules.system.pkgs=$JBOSS_MODULES_SYSTEM_PKGS
        -Djava.awt.headless=true
    - name: DB_VENDOR
      value: postgres
    - name: DB_ADDR
      value: {{ .Release.Name }}-postgresql
    - name: DB_PORT
      value: "5432"
    - name: DB_DATABASE
      value: keycloak
    - name: DB_USER
      value: keycloak
    - name: DB_PASSWORD
      value: keycloak
    - name: KEYCLOAK_IMPORT
      value: /realm/digitalai-platform-realm.json
  extraVolumes: |
    - name: realm-config
      configMap:
        name: {{ .Release.Name }}-realm
  extraVolumeMounts: |
    - name: realm-config
      mountPath: "/realm/"
      readOnly: true
  route:
    enabled: true
    annotations: {}
    labels: {}
    host: "keycloak.example.com"
    tls:
      enabled: true
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
  postgresql:
    enabled: false

# OIDC Settings
oidc:
  enabled: false
  external: false
  clientId:
  clientSecret:
  issuer:
  keyRetrievalUri:
  accessTokenUri:
  userAuthorizationUri:
  logoutUri:
  redirectUri:
  postLogoutRedirectUri:
  rolesClaimName:
  userNameClaimName:

# Central configuration settings
centralConfiguration:
  replicas: 1
  image:
    repository: xebialabs/central-configuration
    tag: 22.2
  persistence:
    annotations: { }
    pvcSize: 500M
  migrateFromEmbedded: "false"
