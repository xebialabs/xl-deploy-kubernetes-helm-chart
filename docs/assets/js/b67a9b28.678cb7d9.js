"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[831],{3905:function(e,t,a){a.d(t,{Zo:function(){return c},kt:function(){return u}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(a),u=o,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||r;return a?n.createElement(f,i(i({ref:t},c),{},{components:a})):n.createElement(f,i({ref:t},c))}));function u(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,i=new Array(r);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},614:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var n=a(7462),o=a(3366),r=(a(7294),a(3905)),i=["components"],l={sidebar_position:14},p="Make custom configuration for the Deploy",s={unversionedId:"make-custom-configuration",id:"make-custom-configuration",isDocsHomePage:!1,title:"Make custom configuration for the Deploy",description:"This is internal documentation. This document can be used only if it was recommended by the Support Team.",source:"@site/docs/make-custom-configuration.md",sourceDirName:".",slug:"/make-custom-configuration",permalink:"/xl-deploy-kubernetes-helm-chart/docs/make-custom-configuration",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Building the operator image from helm chart",permalink:"/xl-deploy-kubernetes-helm-chart/docs/building-operator-image"},next:{title:"Manual integration with the Identity Service",permalink:"/xl-deploy-kubernetes-helm-chart/docs/integrating-with-identity-service"}},c=[{value:"Requirements",id:"requirements",children:[],level:2},{value:"Custom configuration of deployit-security.xml from master pods",id:"custom-configuration-of-deployit-securityxml-from-master-pods",children:[{value:"Steps",id:"steps",children:[],level:3}],level:2},{value:"Custom configuration of deployit.conf.template from master pods",id:"custom-configuration-of-deployitconftemplate-from-master-pods",children:[{value:"Steps",id:"steps-1",children:[],level:3}],level:2},{value:"Custom configuration of deploy-server.yaml.template from cc pods",id:"custom-configuration-of-deploy-serveryamltemplate-from-cc-pods",children:[{value:"Steps",id:"steps-2",children:[],level:3}],level:2}],m={toc:c};function d(e){var t=e.components,a=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"make-custom-configuration-for-the-deploy"},"Make custom configuration for the Deploy"),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This is internal documentation. This document can be used only if it was recommended by the Support Team."))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"From 23.3 version this document is outdated. Use official Digital.ai documentation."))),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Running Deploy installation on k8s cluster"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kubectl")," connected to the cluster"),(0,r.kt)("li",{parentName:"ul"},"Deploy operator with the following versions or above:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"10.2.18"),(0,r.kt)("li",{parentName:"ul"},"10.3.16"),(0,r.kt)("li",{parentName:"ul"},"22.0.8"),(0,r.kt)("li",{parentName:"ul"},"22.1.6"),(0,r.kt)("li",{parentName:"ul"},"22.2.2")))),(0,r.kt)("h2",{id:"custom-configuration-of-deployit-securityxml-from-master-pods"},"Custom configuration of deployit-security.xml from master pods"),(0,r.kt)("h3",{id:"steps"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Download current template configuration file that exists on master Deploy pod that is running.\nFor example, if you want to update deployit-security.xml, it is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/xebialabs/xl-deploy-server/conf/deployit-security.xml")," in master pod."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl cp digitalai/dai-xld-digitalai-deploy-master-0:/opt/xebialabs/xl-deploy-server/conf/deployit-security.xml .\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Update the CR file or CR on the cluster"),(0,r.kt)("p",{parentName:"li"}," Use that file to update your CR file under ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.deploy.configurationManagement.master.configuration.scriptData")," path. Add there the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"deployit-security.xml")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"deployit-security.xml")," key."),(0,r.kt)("p",{parentName:"li"}," Also update the script under the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.deploy.configurationManagement.master.configuration.script")," path. Add there "),(0,r.kt)("p",{parentName:"li"}," For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'...\n        script: |-\n          ...\n          cp /opt/xebialabs/xl-deploy-server/xld-configuration-management/deployit-security.xml /opt/xebialabs/xl-deploy-server/conf/deployit-security.xml && echo "Changing the deployit-security.xml";\n        scriptData:\n          ...\n          deployit-security.xml: |-\n            <?xml version="1.0" encoding="UTF-8"?>\n            ...\n')),(0,r.kt)("p",{parentName:"li"}," Note: This is the example of master configuration. Under spec.deploy.configurationManagement there are also worker and centralConfiguration sections."))),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Save and apply changes from the CR file. Restart pods. "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl rollout restart sts dai-xld-digitalai-deploy-master -n digitalai\n")))),(0,r.kt)("h2",{id:"custom-configuration-of-deployitconftemplate-from-master-pods"},"Custom configuration of deployit.conf.template from master pods"),(0,r.kt)("h3",{id:"steps-1"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Download current template configuration file that exists on master Deploy pod that is running.\nFor example, if you want to update deployit-security.xml, it is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/xebialabs/xl-deploy-server/default-conf/deployit.conf.template")," in master pod."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"```shell\nkubectl cp digitalai/dai-xld-digitalai-deploy-master-0:/opt/xebialabs/xl-deploy-server/default-conf/deployit.conf.template .\n```\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Update the CR file or CR on the cluster"),(0,r.kt)("p",{parentName:"li"}," Use that file to update your CR file under ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.deploy.configurationManagement.master.configuration.scriptData")," path. Add there the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"deployit.conf.template")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"deployit.conf.template")," key."),(0,r.kt)("p",{parentName:"li"}," Also update the script under the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.deploy.configurationManagement.master.configuration.script")," path. Add there "),(0,r.kt)("p",{parentName:"li"}," For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'...\n        script: |-\n          ...\n          cp /opt/xebialabs/xl-deploy-server/xld-configuration-management/deployit.conf.template /opt/xebialabs/xl-deploy-server/default-conf/deployit.conf.template && echo "Changing the deployit.conf.template";\n        scriptData:\n          ...\n          deployit.conf.template: |-\n            # Template for non-HOCON XL Deploy configuration file\n            #\n            admin.password=${ADMIN_PASSWORD}\n            ...\n')),(0,r.kt)("p",{parentName:"li"},"Note: This is the example of master configuration. Under spec.deploy.configurationManagement there are also worker and centralConfiguration sections.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Save and apply changes from the CR file. Restart pods. "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl rollout restart sts dai-xld-digitalai-deploy-master -n digitalai\n")))),(0,r.kt)("h2",{id:"custom-configuration-of-deploy-serveryamltemplate-from-cc-pods"},"Custom configuration of deploy-server.yaml.template from cc pods"),(0,r.kt)("h3",{id:"steps-2"},"Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Download current template configuration file that exists on cc Deploy pod that is running.\nFor example, if you want to update deploy-server.yaml.template, it is in the ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/xebialabs/central-configuration-server/central-conf/deploy-server.yaml.template")," in master pod."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl cp digitalai/dai-xld-digitalai-deploy-cc-server-0:/opt/xebialabs/central-configuration-server/central-conf/deploy-server.yaml.template .\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Update the CR file or CR on the cluster"),(0,r.kt)("p",{parentName:"li"}," Use that file to update your CR file under ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.deploy.configurationManagement.centralConfiguration.configuration.scriptData")," path. Add there the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy-server.yaml.template")," file under the ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy-server.yaml.template")," key."),(0,r.kt)("p",{parentName:"li"}," Also update the script under the ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.deploy.configurationManagement.centralConfiguration.configuration.script")," path. Add there "),(0,r.kt)("p",{parentName:"li"}," For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'...\n        script: |-\n          ...\n          cp /opt/xebialabs/central-configuration-server/xld-configuration-management/deploy-server.yaml.template /opt/xebialabs/central-configuration-server/central-conf/deploy-server.yaml.template && echo "Changing the deploy-server.yaml.template";\n        scriptData:\n          ...\n          deploy-server.yaml.template: |-\n            deploy.server:\n            ...\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"If you have oidc enabled in CR, in that case disable it. Because the changes that are from there will conflict with your changes in the ",(0,r.kt)("inlineCode",{parentName:"p"},"deploy-server.yaml.template")," file."),(0,r.kt)("p",{parentName:"li"},"  Just in CR file put ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.oidc.enabled: false"),"."),(0,r.kt)("p",{parentName:"li"}," Note: when you disable oidc in CR, ",(0,r.kt)("inlineCode",{parentName:"p"},"/opt/xebialabs/central-configuration-server/centralConfiguration/deploy-oidc.yaml")," will be removed. For this reason, it is necessary to copy this file also. In ",(0,r.kt)("inlineCode",{parentName:"p"},"spec.deploy.configurationManagement.centralConfiguration.configuration.script")," you would have:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'...\n       script: |-\n         ...\n         cp /opt/xebialabs/central-configuration-server/xld-configuration-management/deploy-server.yaml.template /opt/xebialabs/central-configuration-server/central-conf/deploy-server.yaml.template && echo "Changing the deploy-server.yaml.template";\n         cp /opt/xebialabs/central-configuration-server/xld-configuration-management/deploy-oidc.yaml /opt/xebialabs/central-configuration-server/centralConfiguration/deploy-oidc.yaml && echo "Changing the deploy-oidc.yaml";\n       scriptData:\n         ...\n         deploy-server.yaml.template: |-\n           deploy.server:\n             ...\n         deploy-oidc.yaml: |-\n           deploy.security:\n             ...\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Save and apply changes from the CR file. Restart pods."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"kubectl rollout restart sts dai-xld-digitalai-deploy-cc-server -n digitalai\nkubectl rollout restart sts dai-xld-digitalai-deploy-master -n digitalai\nkubectl rollout restart sts dai-xld-digitalai-deploy-worker -n digitalai\n")))))}d.isMDXComponent=!0}}]);