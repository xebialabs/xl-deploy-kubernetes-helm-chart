"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[39],{8859:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>a});var t=i(4848),o=i(8453);const l={sidebar_position:15},r="Manual integration with the Identity Service",d={id:"integrating-with-identity-service",title:"Manual integration with the Identity Service",description:"This is internal documentation. This document can be used only if it was recommended by the Support Team.",source:"@site/docs/integrating-with-identity-service.md",sourceDirName:".",slug:"/integrating-with-identity-service",permalink:"/xl-deploy-kubernetes-helm-chart/docs/integrating-with-identity-service",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Make custom configuration for the Deploy",permalink:"/xl-deploy-kubernetes-helm-chart/docs/make-custom-configuration"},next:{title:"Deploy Installation on a Air-gapped K8S Cluster",permalink:"/xl-deploy-kubernetes-helm-chart/docs/air-gapped-installation"}},s={},a=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"1. Adding the Deploy client",id:"1-adding-the-deploy-client",level:2},{value:"2. Configuring Deploy",id:"2-configuring-deploy",level:2},{value:"3. Deploy XLD",id:"3-deploy-xld",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"manual-integration-with-the-identity-service",children:"Manual integration with the Identity Service"}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsx)(n.p,{children:"This is internal documentation. This document can be used only if it was recommended by the Support Team."})}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["There is an account in the platform to connect to the Deploy instance (",(0,t.jsx)(n.a,{href:"https://demoaccount.staging.digital.ai",children:"https://demoaccount.staging.digital.ai"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["There is an admin user (role ",(0,t.jsx)(n.code,{children:"account-admin"}),") in the account that can be used to configure the Deploy client (contact Kraken team)"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"1-adding-the-deploy-client",children:"1. Adding the Deploy client"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Log into the Identity Service account you want to connect to Deploy using an admin user for that account"}),"\n",(0,t.jsx)(n.li,{children:"Go to Admin > Clients > Add OIDC Client"}),"\n",(0,t.jsx)(n.li,{children:"Give the client a name (e.g. deploy)"}),"\n",(0,t.jsx)(n.li,{children:"Scroll down to \u201cValid Redirect URIs\u201d and add"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"<deploy url>/login/external-login\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:"Save the client"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"2-configuring-deploy",children:"2. Configuring Deploy"}),"\n",(0,t.jsx)(n.p,{children:"In CR file disable Keycloak and update OIDC properties:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'  oidc:\n    enabled: true\n    clientId: "<client_id>"\n    clientSecret: "<client secret>"\n    external: true\n    issuer: "https://identity.staging.digital.ai/auth/realms/demoaccount"\n    redirectUri: "<deploy url>/login/external-login"\n    postLogoutRedirectUri: "<deploy url>/login/external-login"\n    rolesClaimName: "realm_access.roles"\n    userNameClaimName: preferred_username\n    scopes: ["openid"]\n'})}),"\n",(0,t.jsx)(n.p,{children:"To find the client id and secret, edit the Deploy client created above, scroll down to the Credentials section, and copy the values from there."}),"\n",(0,t.jsx)(n.p,{children:"issuer can be found in the Identity Service Client section, in OIDC config that can be downloaded from there."}),"\n",(0,t.jsxs)(n.p,{children:["To check rolesClaimName value, decode the ID token.\n",(0,t.jsx)(n.a,{href:"https://docs.xebialabs.com/v.22.2/deploy/concept/deploy-oidc-with-keycloak/#test-public-rest-apis",children:"Here"})," you can find how to fetch token.\nUse ",(0,t.jsx)(n.a,{href:"https://jwt.io/",children:"jwt"})," to decode ID token. Get the roles path from decoded value - this is rolesClaimName."]}),"\n",(0,t.jsx)(n.h2,{id:"3-deploy-xld",children:"3. Deploy XLD"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Deploy XLD and navigate to the Deploy site in the browser. Log in with ",(0,t.jsx)(n.code,{children:"admin"})," user and add the role(s) from the Identity Service user to XLD as a principal. For example, if you are using user with ",(0,t.jsx)(n.code,{children:"account-admin"})," role, this role should be added as principal."]}),"\n",(0,t.jsxs)(n.li,{children:["Go to Global permissions in XLD and give needed permissions. For admin it will be ",(0,t.jsx)(n.code,{children:"admin"})," and ",(0,t.jsx)(n.code,{children:"login"})," permissions."]}),"\n",(0,t.jsx)(n.li,{children:"Log in to the XLD with user from the Identity Service."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>d});var t=i(6540);const o={},l=t.createContext(o);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);