apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "deploy.names.centralConfiguration" . }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.centralConfiguration.statefulsetLabels }}
    {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.statefulsetLabels "context" $) | nindent 4 }}
    {{- end }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if or .Values.commonAnnotations .Values.centralConfiguration.statefulsetAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- if .Values.centralConfiguration.statefulsetAnnotations }}
    {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.statefulsetAnnotations "context" $) | nindent 4 }}
    {{- end }}
  {{- end }}
spec:
  serviceName: {{ include "deploy.names.centralConfiguration" . }}
  podManagementPolicy: {{ .Values.centralConfiguration.podManagementPolicy }}
  replicas: {{ .Values.centralConfiguration.replicaCount }}
  {{- if .Values.centralConfiguration.updateStrategy }}
  updateStrategy: {{- toYaml .Values.centralConfiguration.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
    {{- if .Values.centralConfiguration.podLabels }}
    {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.podLabels "context" $) | nindent 6 }}
    {{- end }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.centralConfiguration.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.commonAnnotations }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 8 }}
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/deploy-centralconfiguration-configuration.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.centralConfiguration.extraSecrets }}
        checksum/centralconfiguration-secret: {{ include (print $.Template.BasePath "/deploy-centralconfiguration-secrets.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.centralConfiguration.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.centralConfiguration.schedulerName }}
      schedulerName: {{ .Values.centralConfiguration.schedulerName | quote }}
      {{- end }}
      serviceAccountName: {{ template "deploy.serviceAccountName" . }}
      {{- if .Values.centralConfiguration.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.affinity "context" .) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.centralConfiguration.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.centralConfiguration.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.centralConfiguration.nodeAffinityPreset.type "key" .Values.centralConfiguration.nodeAffinityPreset.key "values" .Values.centralConfiguration.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.centralConfiguration.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.centralConfiguration.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.centralConfiguration.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.centralConfiguration.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.centralConfiguration.priorityClassName }}
      priorityClassName: {{ .Values.centralConfiguration.priorityClassName }}
      {{- end }}
      {{- if .Values.centralConfiguration.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.centralConfiguration.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.centralConfiguration.dnsPolicy }}
      dnsPolicy: {{ .Values.centralConfiguration.dnsPolicy }}
      {{- end }}
      {{- if .Values.centralConfiguration.hostNetwork }}
      hostNetwork: {{ .Values.centralConfiguration.hostNetwork }}
      {{- end }}
      {{- if .Values.centralConfiguration.dnsConfig }}
      dnsConfig: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.dnsConfig "context" .) | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.centralConfiguration.terminationGracePeriodSeconds }}
      {{- include "deploy.imagePullSecrets" . | nindent 6 }}
      {{- if or .Values.centralConfiguration.initContainers }}
      initContainers:
        {{- if .Values.centralConfiguration.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: deploy
          image: {{ template "deploy.images.image" ( dict "imageRoot" .Values.centralConfiguration.image "global" .Values.global "context" .) }}
          imagePullPolicy: {{ .Values.centralConfiguration.image.pullPolicy | quote }}
          {{- if .Values.centralConfiguration.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.centralConfiguration.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.centralConfiguration.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.centralConfiguration.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.centralConfiguration.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.centralConfiguration.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.args "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.centralConfiguration.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: APP_PORT
              value: {{ .Values.centralConfiguration.containerPorts.ccHttp | quote }}
            - name: LOGBACK_GLOBAL_LOGGING_LEVEL
              value: {{ .Values.centralConfiguration.logback.globalLoggingLevel | quote }}
            - name: LOGBACK_SCAN_ENABLED
              value: {{ .Values.centralConfiguration.logback.scanEnabled | quote }}
            - name: LOGBACK_SCAN_PERIOD
              value: {{ .Values.centralConfiguration.logback.scanPeriod | quote }}
            - name: XL_CLUSTER_MODE
              value: {{ .Values.clusterMode }}
            - name: XLD_IN_PROCESS
              value: {{ .Values.xldInProcess | quote }}
             {{- if or .Values.external.db.enabled .Values.postgresql.install }}
            - name: XL_DB_URL
              value: {{ include "deploy.mainDbUrl" . }}
            - name: XL_DB_USERNAME
              {{- include "render.value-secret" (dict  "value" (include "deploy.mainUsername" .) "source" (.Values.external.db.main.username) "sourceEnabled" (.Values.external.db.enabled) "defaultName" (include "common.names.fullname" .) "defaultKey" "mainDatabaseUsername" "context" $ ) | nindent 14 }}
            - name: XL_DB_PASSWORD
              {{- include "render.value-secret" (dict  "value" (include "deploy.mainPassword" .) "source" (.Values.external.db.main.password) "sourceEnabled" (.Values.external.db.enabled) "defaultName" (include "common.names.fullname" .) "defaultKey" "mainDatabasePassword" "context" $ ) | nindent 14 }}
            - name: XL_DB_MAX_POOL_SIZE
              value: {{ default 10 .Values.external.db.main.maxPoolSize | quote }}
            - name: XL_REPORT_DB_URL
              value: {{ include "deploy.reportDbUrl" . }}
            - name: XL_REPORT_DB_USERNAME
              {{- include "render.value-secret" (dict  "value" (include "deploy.reportUsername" .) "source" (.Values.external.db.report.username) "sourceEnabled" (.Values.external.db.enabled) "defaultName" (include "common.names.fullname" .) "defaultKey" "reportDatabaseUsername" "context" $ ) | nindent 14 }}
            - name: XL_REPORT_DB_PASSWORD
              {{- include "render.value-secret" (dict  "value" (include "deploy.reportPassword" .) "source" (.Values.external.db.report.password) "sourceEnabled" (.Values.external.db.enabled) "defaultName" (include "common.names.fullname" .) "defaultKey" "reportDatabasePassword" "context" $ ) | nindent 14 }}
            - name: XL_REPORT_DB_MAX_POOL_SIZE
              value: {{ default 10 .Values.external.db.report.maxPoolSize | quote }}
             {{- end }}
             {{- if or .Values.rabbitmq.install .Values.external.mq.enabled }}
            - name: XLD_TASK_QUEUE_DRIVER_CLASS_NAME
              value: {{ include "deploy.mqDriverClassName" . }}
            - name: XLD_TASK_QUEUE_URL
              value: {{ include "deploy.mqUrl" . }}
            - name: XLD_TASK_QUEUE_NAME
              value: {{ include "deploy.mqQueueName" . }}
            - name: XLD_TASK_QUEUE_USERNAME
              {{- include "render.value-secret" (dict  "value" (include "deploy.mqUsername" .) "source" .Values.external.mq.username "sourceEnabled" .Values.external.mq.enabled  "defaultName" (include "common.names.fullname" .) "defaultKey" "rabbitmqUsername" "context" $ ) | nindent 14 }}
            - name: XLD_TASK_QUEUE_PASSWORD
              {{- include "render.value-secret" (dict  "value" (include "deploy.mqPassword" .) "source" .Values.external.mq.password "sourceEnabled" .Values.external.mq.enabled "defaultName" (include "common.names.fullname" .) "defaultKey" "rabbitmqPassword" "context" $ ) | nindent 14 }}
             {{- end }}
            {{- if .Values.keystore.keystore }}
            - name: REPOSITORY_KEYSTORE
              {{- include "render.value-secret" (dict  "value" (.Values.keystore.keystore) "defaultName" (include "common.names.fullname" .) "defaultKey" "repositoryKeystore" "context" $ ) | nindent 14 }}
            {{- end }}
            {{- if .Values.keystore.passphrase }}
            - name: REPOSITORY_KEYSTORE_PASSPHRASE
              {{- include "render.value-secret" (dict  "value" (.Values.keystore.passphrase) "defaultName" (include "common.names.fullname" .) "defaultKey" "repositoryKeystorePassphrase" "context" $ ) | nindent 14 }}
            {{- end }}
            - name: XL_METRICS_ENABLED
              value: {{ .Values.metrics.enabled | quote }}
            {{- if .Values.satellite.enabled }}
            - name: ENABLE_SATELLITE
              value: {{ .Values.satellite.enabled | quote }}
            {{- end }}
            - name: GENERATE_XL_CONFIG
              value: {{ .Values.generateXlConfig | quote }}
            - name: USE_IP_AS_HOSTNAME
              value: {{ .Values.centralConfiguration.useIpAsHostname | quote }}
            - name: USE_CACHE
              value: {{ .Values.usaCache | quote }}
            - name: CENTRAL_CONFIG_ENCRYPT_KEY
              {{- include "render.value-secret" (dict  "value" (include "deploy.encryptKey" .) "source" .Values.centralConfiguration.encryptKey "sourceEnabled" true "defaultName" (include "common.names.fullname" .) "defaultKey" "centralConfigurationEncryptKey" "context" $ ) | nindent 14 }}
            {{- if .Values.oidc.enabled }}
            - name: OIDC_CLIENT_ID
              {{- include "render.value-secret" (dict "value" .Values.oidc.clientId "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcClientId" "context" $ ) | nindent 14 }}
            - name: OIDC_CLIENT_SECRET
              {{- include "render.value-secret" (dict "value" .Values.oidc.clientSecret "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcClientSecret" "context" $ ) | nindent 14 }}
            {{- if .Values.oidc.clientAuthJwt.enable -}}
            {{- if .Values.oidc.clientAuthJwt.keyStore.password -}}
            - name: OIDC_CLIENT_AUTH_JWT_KEYSTORE_PASSWORD
              {{- include "render.value-secret" (dict "value" .Values.oidc.clientAuthJwt.keyStore.password "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcClientAuthJwtKeyStorePassword" "context" $ ) | nindent 14 }}
            {{- end -}}
            {{- if .Values.oidc.clientAuthJwt.key.password -}}
            - name: OIDC_CLIENT_AUTH_JWT_KEY_PASSWORD
              {{- include "render.value-secret" (dict "value" .Values.oidc.clientAuthJwt.key.password "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcClientAuthJwtKeyPassword" "context" $ ) | nindent 14 }}
            {{- end -}}
            {{- end -}}
            {{- if and .Values.oidc.accessToken.enable .Values.oidc.accessToken.secretKey -}}
            - name: OIDC_ACCESS_TOKEN_SECRET_KEY
              {{- include "render.value-secret" (dict "value" .Values.oidc.accessToken.secretKey "defaultName" (include "common.names.fullname" .) "defaultKey" "oidcAccessTokenSecretKey" "context" $ ) | nindent 14 }}
            {{- end -}}
            {{- end }}
            - name: CONFIG_SERVER_OPTS_EXT
              value: "{{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.jvmArgs "context" .) }}"
            {{- if .Values.centralConfiguration.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.centralConfiguration.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.centralConfiguration.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.extraEnvVarsSecret "context" $) }}
            {{- end }}
          ports:
            - name: {{ .Values.centralConfiguration.service.portNames.ccHttp }}
              containerPort: {{ .Values.centralConfiguration.containerPorts.ccHttp }}
            {{- if .Values.centralConfiguration.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.centralConfiguration.diagnosticMode.enabled }}
          {{- if .Values.centralConfiguration.health.enabled }}
          livenessProbe:
            httpGet:
              path: /login
              port: {{ .Values.centralConfiguration.service.portNames.ccHttp }}
            initialDelaySeconds: {{ .Values.centralConfiguration.health.probesLivenessTimeout }}
            periodSeconds: {{ .Values.centralConfiguration.health.periodScans }}
            failureThreshold: {{ .Values.centralConfiguration.health.probeFailureThreshold }}
          readinessProbe:
            httpGet:
              path: /login
              port: {{ .Values.centralConfiguration.service.portNames.ccHttp }}
            initialDelaySeconds: {{ .Values.centralConfiguration.health.probesReadinessTimeout }}
            periodSeconds: {{ .Values.centralConfiguration.health.periodScans }}
            failureThreshold: {{ .Values.centralConfiguration.health.probeFailureThreshold }}
          {{- end }}
          {{- end }}
          {{- if .Values.centralConfiguration.resources }}
          resources: {{- toYaml .Values.centralConfiguration.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- range $k, $v := .Values.centralConfiguration.configuration }}
            - name: configuration
              mountPath: /opt/xebialabs/central-configuration-server/{{ $v.path }}
              subPath: {{ $v.path }}
            {{- end }}
            {{- range $k, $v := .Values.centralConfiguration.extraConfiguration }}
            - name: configuration-extra
              mountPath: /opt/xebialabs/central-configuration-server/{{ $v.path }}
              subPath: {{ $v.path }}
            {{- end }}
            {{- if .Values.centralConfiguration.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.centralConfiguration.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.centralConfiguration.configuration }}
        - name: configuration
          configMap:
            name: {{ printf "%s-cc-server-config" (include "common.names.fullname" .) }}
            items:
              {{- range $k, $v := .Values.centralConfiguration.configuration }}
              - key: {{ $k }}
                path: {{ $v.path }}
                {{- if $v.mode}}
                mode: {{ $v.mode }}
                {{- end }}
              {{- end }}
        {{- end }}
        {{- if .Values.centralConfiguration.extraConfiguration }}
        - name: configuration-extra
          configMap:
            name: {{ printf "%s-cc-server-config" (include "common.names.fullname" .) }}-extra
            items:
              {{- range $k, $v := .Values.centralConfiguration.extraConfiguration }}
              - key: {{ $k }}
                path: {{ $v.path }}
                {{- if $v.mode}}
                mode: {{ $v.mode }}
                {{- end }}
              {{- end }}
        {{- end }}
        {{- if .Values.centralConfiguration.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.centralConfiguration.extraVolumes "context" $)  | nindent 8 }}
        {{- end }}
